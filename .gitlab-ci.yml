stages:
  - build
  - test
  - sonar
  - integration

# Déclencher le pipeline uniquement lors d'une merge request
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# Étape 1 : Compilation et création de l'application
build:
  stage: build
  script:
    - echo "Compilation de l'application"
    - npm install  # Installe les dépendances si nécessaire
    - npm run build  # Remplacez par la commande pour construire votre application
  artifacts:
    paths:
      - build/  # Déclare les artefacts générés pour les utiliser dans les étapes suivantes

# Étape 2 : Exécution des tests unitaires
unit_tests:
  stage: test
  script:
    - echo "Exécution des tests unitaires"
    - npx jest user.controller.test.js  # Remplacez par vos fichiers de tests unitaires spécifiques, si nécessaire
    # ou
    - npx jest  # Si vous voulez lancer tous les tests dans le projet
  dependencies:
    - build  # Assurez-vous que l'application est construite avant d'exécuter les tests

# Étape 3 : Analyse SonarQube (facultatif)
sonar_analysis:
  stage: sonar
  script:
    - echo "Analyse du code avec SonarQube"
    - sonar-scanner  # Lance l'analyse de SonarQube, vous devrez configurer SonarQube au préalable
  only:
    - merge_requests  # Exécute uniquement pour les merge requests
  dependencies:
    - unit_tests  # Exécution après les tests unitaires

# Étape 4 : Exécution des tests d'intégration
integration_tests:
  stage: integration
  script:
    - echo "Exécution des tests d'intégration"
    - npx jest integration.test.js  # Remplacez par le fichier de test d'intégration ou exécutez tous les tests si nécessaire
  dependencies:
    - build
    - unit_tests
    - sonar_analysis